{"name":"Squib","tagline":"A Ruby DSL for prototyping card games","body":"Squib is a Ruby [DSL](http://en.wikipedia.org/wiki/Domain-specific_language) for prototyping card and board games. With Squib, you just write a little bit of Ruby and you can compile your game's data and images into a series of images raedy for print-and-play or even print-on-demand. Squib is very data-driven - think of it like [nanDeck](http://www.nand.it/nandeck/) done \"the Ruby way\". Squib supports:\r\n\r\n* A concise set of rules for laying out your cards\r\n* Loading PNGs and SVGs using [Cairo](http://cairographics.org/)\r\n* Complex text rendering using [Pango](http://www.pango.org/)\r\n* Reading `.xlsx` files\r\n* Basic shape drawing\r\n* Rendering decks to PNGs and PDFs\r\n* Data-driven layouts\r\n* Unit conversion\r\n* Plus the full power of Ruby! \r\n\r\nCheck this out. \r\n\r\n```ruby\r\nrequire 'squib'\r\n\r\nSquib::Deck.new do\r\n  text str: 'Hello, World!'  \r\n  save_png\r\nend\r\n```\r\n\r\nThat script just created a deck of cards with 1 image at 825x1125 with the string \"Hello, World\" in the upper-left corner.\r\n","google":"UA-54811605-1","note":"Don't delete this file! It's used internally to help with page regeneration."}